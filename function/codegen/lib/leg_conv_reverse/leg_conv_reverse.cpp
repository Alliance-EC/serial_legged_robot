//
// File: leg_conv_reverse.cpp
//
// MATLAB Coder version            : 23.2
// C/C++ source code generated on  : 09-Oct-2024 20:42:39
//

// Include Files
#include "leg_conv_reverse.h"
#include "rt_nonfinite.h"
#include "rt_defines.h"
#include <cmath>

// Function Declarations
static double rt_atan2d_snf(double u0, double u1);

// Function Definitions
//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_atan2d_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else if (std::isinf(u0) && std::isinf(u1)) {
    int i;
    int i1;
    if (u0 > 0.0) {
      i = 1;
    } else {
      i = -1;
    }
    if (u1 > 0.0) {
      i1 = 1;
    } else {
      i1 = -1;
    }
    y = std::atan2(static_cast<double>(i), static_cast<double>(i1));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = std::atan2(u0, u1);
  }
  return y;
}

//
// LEG_CONV_REVERSE
//     T_r = LEG_CONV_REVERSE(T1,T2,PHI1,PHI2)
//
// Arguments    : double T1
//                double T2
//                double phi1
//                double phi2
//                double T_r[2]
// Return Type  : void
//
void leg_conv_reverse(double T1, double T2, double phi1, double phi2,
                      double T_r[2])
{
  double t13;
  double t14_im_tmp;
  double t14_re_tmp;
  double t4;
  double t5;
  //     This function was generated by the Symbolic Math Toolbox version 23.2.
  //     2024-10-09 20:33:01
  t4 = std::sin(phi1);
  t5 = std::sin(phi2);
  t14_re_tmp = std::cos(phi1) * 0.18 + std::cos(phi2) * 0.18;
  t14_im_tmp = t4 * 0.18 + t5 * 0.18;
  t13 = 1.0 / std::sin(phi1 - phi2);
  t4 = rt_atan2d_snf(t14_im_tmp, (t14_re_tmp + t4 * 0.0) + t5 * 0.0);
  t5 = phi1 - t4;
  t4 = phi2 - t4;
  T_r[0] = t13 * (T1 * std::cos(t4) * 0.18 - T2 * std::cos(t5) * 0.18) *
           -30.8641975308642;
  T_r[1] = t13 * std::sqrt(t14_im_tmp * t14_im_tmp + t14_re_tmp * t14_re_tmp) *
           (T1 * std::sin(t4) * 0.18 - T2 * std::sin(t5) * 0.18) *
           -30.8641975308642;
}

//
// File trailer for leg_conv_reverse.cpp
//
// [EOF]
//
