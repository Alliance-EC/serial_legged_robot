//
// File: leg_pos.cpp
//
// MATLAB Coder version            : 23.2
// C/C++ source code generated on  : 09-Oct-2024 20:44:07
//

// Include Files
#include "leg_pos.h"
#include "rt_nonfinite.h"
#include "rt_defines.h"
#include <cmath>

// Function Declarations
static double rt_atan2d_snf(double u0, double u1);

// Function Definitions
//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_atan2d_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else if (std::isinf(u0) && std::isinf(u1)) {
    int i;
    int i1;
    if (u0 > 0.0) {
      i = 1;
    } else {
      i = -1;
    }
    if (u1 > 0.0) {
      i1 = 1;
    } else {
      i1 = -1;
    }
    y = std::atan2(static_cast<double>(i), static_cast<double>(i1));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = std::atan2(u0, u1);
  }
  return y;
}

//
// LEG_POS
//     POS = LEG_POS(PHI1,PHI2)
//
// Arguments    : double phi1
//                double phi2
//                double pos[2]
// Return Type  : void
//
void leg_pos(double phi1, double phi2, double pos[2])
{
  double a_tmp;
  double b_a_tmp;
  //     This function was generated by the Symbolic Math Toolbox version 23.2.
  //     2024-10-09 20:33:01
  a_tmp = std::sin(phi1) * 0.18 + std::sin(phi2) * 0.18;
  b_a_tmp = std::cos(phi1) * 0.18 + std::cos(phi2) * 0.18;
  pos[0] = std::sqrt(a_tmp * a_tmp + b_a_tmp * b_a_tmp);
  pos[1] = 1.5707963267948966 - rt_atan2d_snf(a_tmp, b_a_tmp);
}

//
// File trailer for leg_pos.cpp
//
// [EOF]
//
